//相对于01背包，完全背包是每件物品可以取无限次。
void packageTotal()
{
	for(int i = 1; i <= N; i++ )
	{
		for(int j = 1; j <= M; j++) //相比01背包最终优化代码，只是换了遍历方向而已
		{
			if(j >= weight[i])
			{
				V1[j] = max(V1[j], V1[j - weight[i]] + value[i]);
			}
		}
	}
}
//更换遍历方向的原因，要看为何01背包要逆序遍历。
//因为01背包每件物品只能取一次，所以若正向遍历一维数组就不能保存i-1时的状态
//那为什么完全背包可以正向遍历呢？
//因为完全背包物品可以无限获取只要空间足够
//比如对于第i件物品，它是2 weight，3 value的物品。首先在j=2时可以获取一次，比较与i-1状态下的v1[2]
//假设3 value更大，那么明显不取之前的物品了，更换取该物品。当j=4时，根据状态转移方程V1[4] = max(V1[4], V1[2] + 3)
//v1[2]已经不是i-1状态下的值了，但是因为是完全背包所以不用担心第i件物品被多次取用只需要价值最大就行。此时依然可以取用第i件物品。
