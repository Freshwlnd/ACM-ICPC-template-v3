const int maxn = 100005;
int n;

struct node{
    int s;
    int e;
    bool operator<(const node& a){
        return s==a.s?e<a.e:s<a.s;
    }
};


/************************类声明************************/
class Graph
{
    int V;             // 顶点个数
    list<int> *adj;    // 邻接表
    priority_queue<int,vector<int>,greater<int> > q;      // 优先队列，优先级低的数字在顶部，维护一个入度为0的顶点的集合
    int* indegree;     // 记录每个顶点的入度
public:
    Graph(int V);                   // 构造函数
    ~Graph();                       // 析构函数
    void addEdge(int v, int w);     // 添加边
    bool topological_sort();        // 拓扑排序
};
queue<int> ans;
/************************类定义************************/
Graph::Graph(int V)
{
    this->V = V;
    adj = new list<int>[V+1];

    indegree = new int[V+1];  // 入度全部初始化为0
    for(int i=1; i<=V; ++i)
        indegree[i] = 0;
}

Graph::~Graph()
{
    delete [] adj;
    delete [] indegree;
}

void Graph::addEdge(int v, int w)
{
    adj[v].push_back(w);
    ++indegree[w];
}

bool Graph::topological_sort()
{
    for(int i=1; i<=V; ++i)
        if(indegree[i] == 0)
            q.push(i);         // 将所有入度为0的顶点入队

    int count = 0;             // 计数，记录当前ans个数
    while(!q.empty())
    {
        int v = q.top();      // 取优先队列顶部元素
        q.pop();
        ans.push(v);
        ++count;
        // 将所有v指向的顶点的入度减1，并将入度减为0的顶点入栈
        list<int>::iterator beg = adj[v].begin();
        for( ; beg!=adj[v].end(); ++beg)
            if(!(--indegree[*beg]))
                q.push(*beg);   // 若入度为0，则入队
    }

    if(count < V)
        return false;           // 没有输出全部顶点，有向图中有回路
    else
        return true;            // 拓扑排序成功
}

int main(){
    ios::sync_with_stdio(false);
    struct node point[maxn];

    int m,T;
    while(cin>>n>>m){//n个队伍,m场比赛
        if(n==1){
            for(int i = 1;i <= m;++i){
                cin>>point[i].s>>point[i].e;//s胜e
            }
            cout<<'1'<<endl;
        }
        else{
            Graph g(n);
            for(int i = 1;i <= m;++i){
                cin>>point[i].s>>point[i].e;//s胜e
            }
            sort(point+1,point+m);
            for(int i=1;i<=m;++i){
                if(point[i].s!=point[i-1].s||point[i].e!=point[i-1].e)
                    g.addEdge(point[i].s,point[i].e);
            }
            g.topological_sort();
            while(!ans.empty()){
                int v=ans.front();
                cout<<v;
                ans.pop();
                if(!ans.empty())
                    cout<<' ';
                else
                    cout<<endl;
            }
        }
    }
    return 0;
}
