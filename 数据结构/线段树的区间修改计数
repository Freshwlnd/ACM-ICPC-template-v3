#define lson l , m , rt << 1
#define rson m + 1 , r , rt << 1 | 1
#define root 1 , N , 1
#define LL long long
const int maxn = 100005;
LL add[maxn<<2];
LL sum[maxn<<2];
//向上更新
void PushUp(int rt) {
    sum[rt] = sum[rt<<1] + sum[rt<<1|1];
}
//延迟更新
void PushDown(int rt,int m) {
    if (add[rt]) {
        add[rt<<1] += add[rt];
        add[rt<<1|1] += add[rt];
        sum[rt<<1] += add[rt]*(m-(m>>1));
        sum[rt<<1|1] += add[rt]*(m>>1);
        add[rt] = 0;
    }
}
//建树
void build(int l,int r,int rt) {
    add[rt] = 0;
    sum[rt] = 0;
    if (l == r) {
        return ;
    }
    int m = (l + r) >> 1;
    build(lson);
    build(rson);
    PushUp(rt);
}
//区间更新
void update(int L,int R,int l,int r,int rt) {
    if (L <= l && r <= R) {
        add[rt] ++;
        sum[rt] += (r - l + 1);
        return ;
    }
    PushDown(rt , r - l + 1);
    int m = (l + r) >> 1;
    if (L <= m) update(L , R , lson);
    if (m < R) update(L , R , rson);
}
//询问
LL query(int L,int R,int l,int r,int rt) {
    if (L <= l && r <= R) {
        return sum[rt];
    }
    PushDown(rt , r - l + 1);
    int m = (l + r) >> 1;
    LL ret;
    if (L <= m) ret = query(L , R , lson);
    if (m < R) ret = query(L , R , rson);
    return ret;
}
